
QC) 1--NUMBER IS PRIME OR NOT.
#include <stdio.h> 
void prime();
void main() 
{
    int n;
    printf("Enter any number\n");
    scanf("%d",&n);
    prime(n);
}
void prime(int n)
{
    int i,c=0;
    for(i=1;i<= n;i++)
    {
        if (n%i==0) 
        {
            c++;
        }
    }
    if(c==2)
    {
  	    printf("\n%d is a Prime number",n);
    }
    else 
    {
     printf("\n%d is not a Prime number",n);
    }
}





OUTPUT:

Enter any number
7
7 is a Prime number


------------------------------------------------------------------------


QF) 3- REVERSE A NUMBER. 
 #include<stdio.h>
int findReverse(int n)
{
   int sum=0;
   while (n!=0)
   {
     sum = sum*10 + n%10;
     n /= 10;
   }
   return sum;
}

int main()
{
   int number, reverse;

   printf("Enter a positive interger: ");
   scanf("%d", &number);

   reverse = findReverse(number);

   printf("The reverse of %d is: %d", number, reverse);

   return 0;
}

OUTPUT :
Enter a positive interger: 12345
The reverse of 12345 is: 54321



-------------------------------------------------------


QI)  3--PERFORM MATRIX MULTIPLICATION BETWEEN TWO MXN ARRAY.

#include<stdio.h>
void multiply(int m1, int m2, int mat1[][m2], int n1,
              int n2, int mat2[][n2])
{
    int x, i, j;
    int res[m1][n2];
    for (i = 0; i < m1; i++) 
    {
        for (j = 0; j < n2; j++) 
        {
            res[i][j] = 0;
            for (x = 0; x < m2; x++) 
            {
                *(*(res + i) + j) += *(*(mat1 + i) + x)
                                     * *(*(mat2 + x) + j);
            }
        }
    }
    for (i = 0; i < m1; i++) 
    {
        for (j = 0; j < n2; j++) 
        {
            printf("%d ", *(*(res + i) + j));
        }
        printf("\n");
    }
}
 
int main()
{
    int mat1[][2] = { { 2, 4 }, { 3, 4 } };
    int mat2[][2] = { { 1, 2 }, { 1, 3 } };
    int m1 = 2, m2 = 2, n1 = 2, n2 = 2;
   
    
    multiply(m1, m2, mat1, n1, n2, mat2);
    return 0;
}

OUTPUT :
6 16 
7 18 


----------------------------------------------------------------------